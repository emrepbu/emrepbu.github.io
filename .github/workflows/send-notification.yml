# Workflow'un adı: GitHub'ın Actions sekmesinde bu isimle görünecektir.
name: Send Push Notification on Markdown Change

# Tetikleyici: Bu workflow'un ne zaman çalışacağını belirler.
on:
  # 'notification' branch'ine her 'push' yapıldığında çalışacaktır.
  push:
    branches:
      - main
    # Sadece .md veya .mdx uzantılı dosyalar değiştiğinde workflow'u başlat.
    paths:
      - '**.md'
      - '**.mdx'

# Yapılacak işler (Jobs)
jobs:
  # Tek bir iş tanımlıyoruz, adını 'send_notification' koyduk.
  send_notification:
    # İşin çalışacağı sanal makine tipi.
    runs-on: ubuntu-latest

    # İşin adımları (Steps)
    steps:
      # Adım 1: Repoyu klonla, böylece git geçmişine erişebiliriz.
      # Bu adım, git komutlarını çalıştırabilmemiz için gereklidir.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Adım 2: Commit mesajını ve gövdesini alıp bir sonraki adıma hazırla.
      - name: Prepare Notification Content
        id: prep_content # Bu adıma bir ID veriyoruz ki çıktılarını kullanabilelim.
        run: |
          # Commit konusunu (başlık) al
          TITLE=$(git log -1 --pretty=%s)
          # Commit gövdesini (açıklama) al
          BODY=$(git log -1 --pretty=%b)

          # Çok satırlı metinleri güvenli bir şekilde bir sonraki adıma aktarmak için
          # 'heredoc' formatını kullanıyoruz.
          echo "title<<EOF" >> $GITHUB_OUTPUT
          echo "$TITLE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Adım 3: Cloud Function'ı dinamik içerikle tetikle.
      - name: Trigger Announcement Cloud Function
        run: |
          # Bir önceki adımdan gelen çıktıları kullanarak JSON payload'u oluşturuyoruz.
          # jq kullanarak bunu güvenli bir şekilde yapıyoruz. jq, GitHub Actions runner'larında varsayılan olarak bulunur.
          JSON_PAYLOAD=$(jq -n \
            --arg title "${{ steps.prep_content.outputs.title }}" \
            --arg body "${{ steps.prep_content.outputs.body }}" \
            '{title: $title, body: $body}')

          # cURL komutunu, oluşturduğumuz dinamik JSON payload ile çalıştırıyoruz.
          curl -X POST "${{ secrets.CLOUD_FUNCTION_URL }}" \
          -H "Content-Type: application/json" \
          -H "x-secret-key: ${{ secrets.ANNOUNCEMENT_SECRET_KEY }}" \
          -d "$JSON_PAYLOAD"
